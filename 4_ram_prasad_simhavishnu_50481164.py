# -*- coding: utf-8 -*-
"""4_Ram_Prasad_Simhavishnu_50481164.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ZLGzf5N56fy4_imUZb53efKVBJdN1cw

Problem 4:
You need to implement the merge-sort algorithm to sort a
list of cities, but the sorting should only consider the population of the cities. No other criteria should be used in the sorting process. However, if two cities have the same population, they should maintain their original order as in the input. This is commonly referred to as a “stable sort”. An O(n log n)-time algorithm is sufficient to pass any feasible test cases.
Input You need to read the input from the console. The input consists of n lines of data. Each line i contains two positive integers: ai, which is the index of the city, and pi, representing the population of the city. You can assume that 1 ≤ ai ≤ 1000 and 1000 ≤ pi ≤ 1000000.


---


Output:You need to output to console. The output from line 1 to line n, you need to output the cities in ascending order of population.
"""

def merge_sort(cities):
    if len(cities) <= 1:
        return cities

    mid = len(cities) // 2
    left_half = cities[:mid]
    right_half = cities[mid:]

    left_sorted = merge_sort(left_half)
    right_sorted = merge_sort(right_half)

    return merge(left_sorted, right_sorted)

def merge(left, right):
    list_merge = []
    left_index, right_index = 0, 0

    while left_index < len(left) and right_index < len(right):
        if left[left_index][1] <= right[right_index][1]:
            list_merge.append(left[left_index])
            left_index += 1
        else:
            list_merge.append(right[right_index])
            right_index += 1


    list_merge.extend(left[left_index:])
    list_merge.extend(right[right_index:])

    return list_merge

list_city = []
try:
    while True:
        city_info = input().split()
        if not city_info:
            break
        city_index, city_population = int(city_info[0]), int(city_info[1])
        list_city.append((city_index, city_population))
except EOFError:
    pass


city_sorted = merge_sort(list_city)


for i in city_sorted:
    print(i[0], i[1])

