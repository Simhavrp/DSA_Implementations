# -*- coding: utf-8 -*-
"""2_Ram_Prasad_Simhavishnu_50481164.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w6FNhUHOyB2ItptQB91_vXgtf4sxMYeP

Problem 2:
You need to implement the algorithm for the interval partitioning problem. An O(n log n)-time algorithm is sufficient to pass any feasible test cases.
(Hint: use the heap data structure.)


---



(a) Input You need to read the input from the console. In the first line of the input, we
have one positive integer n. n is the number of intervals. The intervals are indexed from 1 to n. You can assume that 1 ≤ n ≤ 100000. In the next n lines, each line contains 2 integers: si and fi. This indicates that there is an interval (si, fi).

(b) Output You need to output to the console. The output is the number of machines.
"""

import heapq

def interval_partitioning(n, intervals):
    intervals.sort(key=lambda x: x[0])
    mach = []
    heapq.heapify(mach)

    for itv in intervals:
        if mach and mach[0] <= itv[0]:
            heapq.heappop(mach)

        heapq.heappush(mach, itv[1])

    return len(mach)

n = int(input())
intervals = [tuple(map(int, input().split())) for _ in range(n)]
print(interval_partitioning(n, intervals))